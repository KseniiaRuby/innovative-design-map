{"version":3,"sources":["store/ClassificationContext.js","pages/Gateway.js","components/Header.js","components/ClassificationHeader.js","components/HorizontalProjectSummaries/Button.js","components/HorizontalProjectSummaries/ProjectSlider.js","components/HorizontalProjectSummaries/HorizontalProjectMenu.js","components/Navbar.js","pages/Category.js","components/MarkPointOnMap.js","pages/Map.js","components/ProjectPage/ProjectHeader.js","components/ProjectPage/ProjectPageLeftSideShortcuts.js","components/ProjectPage/ProjectDescription.js","components/ProjectPage/ProjectRelatedClassifications.js","components/ProjectPage/ProjectFeatureWords.js","store/GlossaryContext.js","components/Glossary/TextWithGlossaryLinks.js","components/ProjectPage/ProjectClassifications.js","components/Glossary/GlossaryContainer.js","pages/ProjectPage.js","store/ClassificationProvider.js","store/GlossaryProvider.js","App.js","reportWebVitals.js","index.js"],"names":["ClassificationContext","createContext","allClassifications","allGatewayWords","gatewayWord","undefined","classification","projects","Gateway","classificationCtx","useContext","useState","gateway","setGateway","className","value","onChange","e","target","setGatewayWord","map","to","Header","selectedGateway","classificationName","shortDescription","Button","children","type","linkProperty","onClick","imageUrl","link","style","backgroundImage","window","scrollTo","top","behavior","ProjectSlider","slides","selectedProjectIndex","setSelectedProjectIndex","features","Array","from","length","isArray","project","index","imageUrls","image1","image","_id","projectName","HorizontalProjectMenu","Navbar","Category","mapboxgl","accessToken","process","MarkPointOnMap","mapContainer","useRef","setMap","useEffect","pins","forEach","feature","el","document","createElement","push","Marker","setLngLat","location","coordinates","addTo","addEventListener","pin","remove","newMap","Map","container","current","center","zoom","attributionControl","addControl","NavigationControl","showZoom","showCompass","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","showUserLocation","showAccuracyCircle","showUserHeading","ref","ProjectHeader","projectImageBackground","projectImageAlt","ResizeToFitText","useCallback","element","outerHeight","fontSize","getComputedStyle","parseInt","clientHeight","getElementById","titleDiv","id","src","alt","width","padding","float","LeftSideShortcutField","label","hasAValue","ProjectPageLeftSideShortcuts","projectAddress","projectCity","projectProvince","projectPostalCode","CheckIfHasValue","ProjectDescription","projectTypology","projectNeighbourhood","projectFirm","projectYear","projectClient","ProjectRelatedClassifications","projectPrimaryName","projectSecondaryName","projectTertiaryName","FeatureWordsList","featureWords","featureWord","GlossaryContext","allTerms","selectSelectedTerm","selectedDefinition","indexOfTerm","term","text","startingAt","indexOf","TextSpan","glossaryContext","setSelectedTerm","TextWithGlossaryLinks","textSpanDetails","setTextSpanDetails","terms","sort","a","b","spanDetails","newSpanDetails","spanDetail","resultSpans","startIndex","upperCaseTerm","toUpperCase","upperCaseText","nextMatchIndex","substr","splitSpanWithTerm","textSpan","ProjectClassifications","projectDescription","projectPrimaryDescription","projectSecondaryDescription","projectTertiaryDescription","modalStyles","overlay","backgroundColor","content","left","bottom","right","color","GlossaryIndex","selectedLetter","selectTerm","filtered","filter","startsWith","sorted","GlossaryEntry","description","LetterSelector","letter","selectLetter","LetterSelectors","GlossaryContainer","showGlossary","setShowGlossary","setSelectedLetter","charAt","isOpen","ProjectPage","chosenID","useParams","setProject","requestOptions","method","headers","fetch","response","status","Error","json","data","console","log","getProject","address","city","province","postalCode","Neighbourhood","companyName","dateOfCompletion","projectOwnersAndClients","innovationDescriptions","primaryTypeOfInnovation","secondaryTypeOfInnovation","tertiaryTypeOfInnovation","ClassificationProvider","setAllClassifications","setAllGatewayWords","setClassification","setProjects","classifications","getAllClassifications","foundGatewayWords","newGatewayWords","gatewayWords","concat","foundClassification","find","includes","getProjects","Provider","removeNBSP","replace","fixDefinition","definition","GlossaryProvider","allDefintions","setAllDefinitions","setAllTerms","setSelectedDefinition","definitions","getAllDefinitions","foundDefintion","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e8dc6ea8.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst ClassificationContext = createContext({\r\n  // All available classification objects\r\n  allClassifications: [],\r\n  // All available gateway words\r\n  allGatewayWords: [],\r\n  // Initialize gateway word\r\n  gatewayWord: undefined,\r\n  // Initialize classification\r\n  classification: undefined,\r\n  // Initialize project summaries\r\n  projects: [],\r\n});\r\n\r\nexport default ClassificationContext;\r\n","import { useState, useContext } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport ClassificationContext from \"../store/ClassificationContext\"\r\nimport \"../styles/Styles.css\"\r\n\r\nexport function Gateway() {\r\n   const classificationCtx = useContext(ClassificationContext)\r\n   const [gateway, setGateway] = useState(classificationCtx.gatewayWord)\r\n\r\n   return (\r\n      <div className=\"choose-gateway-word-title\">\r\n         What <br /> makes <br />\r\n         Calgary\r\n         <div className=\"list-spacer\">\r\n            <select\r\n               className=\"list-style\"\r\n               value={gateway}\r\n               onChange={(e) => {\r\n                  setGateway(e.target.value)\r\n                  classificationCtx.setGatewayWord(e.target.value)\r\n               }}\r\n            >\r\n               <option value=\"\"></option>\r\n               {classificationCtx.allGatewayWords.map((gatewayWord) => {\r\n                  return <option key={gatewayWord}>{gatewayWord}</option>\r\n               })}\r\n            </select>\r\n            &nbsp;?\r\n            <div>\r\n               <div className=\"button-spacer\">\r\n                  {gateway ? (\r\n                     <div>\r\n                        <button className=\"button-lets-go\">\r\n                           <Link className=\"button-styling\" to=\"/Category\">\r\n                              Let's Go\r\n                           </Link>\r\n                        </button>\r\n                     </div>\r\n                  ) : null}\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n","import { useContext } from \"react\";\r\nimport ClassificationContext from \"../store/ClassificationContext\";\r\nimport \"../styles/Styles.css\";\r\n\r\nexport default function Header() {\r\n  const classificationCtx = useContext(ClassificationContext);\r\n  let selectedGateway = \"\";\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"header-container\">\r\n          <div className=\"title-text\">\r\n            What makes Calgary{\" \"}\r\n            <select\r\n              className=\"list-style\"\r\n              value={classificationCtx.gatewayWord}\r\n              onChange={(e) => {\r\n                selectedGateway = e.target.value;\r\n                classificationCtx.setGatewayWord(selectedGateway);\r\n              }}\r\n            >\r\n              {classificationCtx.allGatewayWords.map((gatewayWord) => {\r\n                return <option key={gatewayWord}>{gatewayWord}</option>;\r\n              })}\r\n            </select>\r\n            &nbsp;?\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport ClassificationContext from \"../store/ClassificationContext\";\r\nimport \"../styles/Styles.css\";\r\n\r\nexport default function Header() {\r\n  const classificationCtx = useContext(ClassificationContext);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"classification-container\">\r\n          {classificationCtx.classification && (\r\n            <div className=\"title-text\">\r\n              {classificationCtx.classification.classificationName}\r\n            </div>\r\n          )}\r\n          {classificationCtx.classification && (\r\n            <div className=\"description-text border-bottom\">\r\n              {classificationCtx.classification.shortDescription}\r\n            </div>\r\n          )}\r\n          <h2 className=\"title-text-padding\">EXPLORE PROJECTS</h2>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../styles/Styles.css\";\r\n\r\nexport const Button = ({ children, type, onClick, linkProperty, imageUrl }) => {\r\n  const link = linkProperty ? linkProperty : \"/ProjectPage\";\r\n\r\n  const scrollToTop = () => {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <button\r\n      style={{\r\n        backgroundImage: `url(${imageUrl})`,\r\n      }}\r\n      className={\"btn-large\"}\r\n      // onClick={onClick}\r\n      onClick={scrollToTop}\r\n      type={type}\r\n    >\r\n      <Link to={link} className=\"btn-text\">\r\n        {children}\r\n      </Link>\r\n    </button>\r\n  );\r\n};\r\n","import { Button } from \"./Button\";\r\nimport { IoIosArrowForward, IoIosArrowBack } from \"react-icons/io\";\r\nimport \"../../styles/Styles.css\";\r\n\r\nconst ProjectSlider = ({\r\n  slides,\r\n  selectedProjectIndex,\r\n  setSelectedProjectIndex,\r\n}) => {\r\n  const features = Array.from(slides);\r\n  const length = features.length;\r\n\r\n  const nextSlide = () => {\r\n    setSelectedProjectIndex(\r\n      selectedProjectIndex === length - 1 ? 0 : selectedProjectIndex + 1\r\n    );\r\n  };\r\n\r\n  const prevSlide = () => {\r\n    setSelectedProjectIndex(\r\n      selectedProjectIndex === 0 ? length - 1 : selectedProjectIndex - 1\r\n    );\r\n  };\r\n\r\n  if (!Array.isArray(features).length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"slider-container\">\r\n      <div className=\"slider-container-left\">\r\n        <IoIosArrowBack className=\"arrow\" onClick={prevSlide} />\r\n      </div>\r\n      <section className=\"slider\">\r\n        {features.map((project, index) => {\r\n          return (\r\n            <div\r\n              className={\r\n                index === selectedProjectIndex ? \"slide active\" : \"slide\"\r\n              }\r\n              key={index}\r\n            >\r\n              {index === selectedProjectIndex && (\r\n                <Button\r\n                  imageUrl={project.imageUrls.image1.image}\r\n                  linkProperty={`/ProjectPage/` + project._id}\r\n                >\r\n                  <div>\r\n                    <div className=\"project-name-align\">\r\n                      <div>\r\n                        <span>\r\n                          {project.projectName}{\" \"}\r\n                          <div className=\"count\">\r\n                            {index + 1} of {length}{\" \"}\r\n                          </div>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Button>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </section>\r\n      <div className=\"slider-container-right\">\r\n        <IoIosArrowForward className=\"arrow\" onClick={nextSlide} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectSlider;\r\n","import React, { useContext } from \"react\"\r\nimport ProjectSlider from \"./ProjectSlider\"\r\nimport ClassificationContext from \"../../store/ClassificationContext\"\r\n\r\nfunction HorizontalProjectMenu({\r\n   selectedProjectIndex,\r\n   setSelectedProjectIndex,\r\n}) {\r\n   const classificationCtx = useContext(ClassificationContext)\r\n   return (\r\n      <ProjectSlider\r\n         slides={classificationCtx.projects}\r\n         selectedProjectIndex={selectedProjectIndex}\r\n         setSelectedProjectIndex={setSelectedProjectIndex}\r\n      />\r\n   )\r\n}\r\n\r\nexport default HorizontalProjectMenu\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../styles/Styles.css\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"navbar-container border-top\">\r\n          <Link to=\"/\" className=\"nav-links\">\r\n            Home\r\n          </Link>\r\n          <Link to=\"/Category\" className=\"nav-links\">\r\n            Explore\r\n          </Link>\r\n          <Link to=\"/Map\" className=\"nav-links\">\r\n            Map\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport ClassificationHeader from \"../components/ClassificationHeader\";\r\nimport HorizontalProjectMenu from \"../components/HorizontalProjectSummaries/HorizontalProjectMenu\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport \"../styles/Styles.css\";\r\n\r\nexport default function Category() {\r\n  let [selectedProjectIndex, setSelectedProjectIndex] = useState(0);\r\n  return (\r\n    <div className=\"container-flex\">\r\n      <div>\r\n        <Header />\r\n      </div>\r\n      <div>\r\n        <ClassificationHeader />\r\n      </div>\r\n      {/* <div className=\"project-title-spacer\"></div> */}\r\n      <div>\r\n        <HorizontalProjectMenu\r\n          selectedProjectIndex={selectedProjectIndex}\r\n          setSelectedProjectIndex={setSelectedProjectIndex}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Navbar />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable */\r\n// import mapboxgl from \"mapbox-gl\";\r\nimport mapboxgl from \"!mapbox-gl\";\r\nimport React, { useRef, useEffect, useState, useContext } from \"react\";\r\nimport ClassificationContext from \"../store/ClassificationContext\";\r\nimport \"../styles/Styles.css\";\r\nimport \"../styles/MarkPointOnMap.css\";\r\n\r\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\r\n\r\nfunction MarkPointOnMap({ setSelectedProjectIndex, selectedProjectIndex }) {\r\n  const mapContainer = useRef(null);\r\n  const classificationCtx = useContext(ClassificationContext);\r\n  const features = Array.from(classificationCtx.projects);\r\n  const [map, setMap] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let pins = [];\r\n    if (map) {\r\n      features.forEach((feature, index) => {\r\n        let el = document.createElement(\"div\");\r\n        pins.push(el);\r\n        if (index === selectedProjectIndex) {\r\n          el.className = `red-marker`;\r\n        } else {\r\n          el.className = `markers`;\r\n        }\r\n        new mapboxgl.Marker(el)\r\n          .setLngLat(feature.location.coordinates)\r\n          .addTo(map);\r\n        el.addEventListener(\"click\", () => {\r\n          setSelectedProjectIndex(index);\r\n        });\r\n      });\r\n    }\r\n    const cleanup = () => {\r\n      pins.forEach((pin) => pin.remove());\r\n    };\r\n    return cleanup;\r\n  }, [features, setSelectedProjectIndex, selectedProjectIndex, map]);\r\n\r\n  useEffect(() => {\r\n    const newMap = new mapboxgl.Map({\r\n      container: mapContainer.current,\r\n      style: \"mapbox://styles/femibodegeorgeg/cks6lqlra6vmv17p669fj7r46\",\r\n      center: [-114.066666, 51.049999],\r\n      zoom: 10,\r\n      attributionControl: true,\r\n    });\r\n\r\n    // Add zoom and rotation controls to the map.\r\n    newMap.addControl(\r\n      new mapboxgl.NavigationControl({\r\n        //    visualizePitch: true,\r\n        showZoom: true,\r\n        showCompass: true,\r\n      })\r\n    );\r\n\r\n    // Add geolocate control to the map.\r\n    newMap.addControl(\r\n      new mapboxgl.GeolocateControl({\r\n        positionOptions: {\r\n          enableHighAccuracy: true,\r\n        },\r\n        trackUserLocation: true,\r\n        showUserLocation: true,\r\n        showAccuracyCircle: true,\r\n        showUserHeading: true,\r\n      })\r\n    );\r\n\r\n    setMap(newMap);\r\n  }, [classificationCtx.projects]);\r\n\r\n  return (\r\n    <div className=\"map-spacer-top\">\r\n      <div className=\"map-container\" ref={mapContainer} />\r\n      <div className=\"map-spacer-bottom\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MarkPointOnMap;\r\n","import Header from \"../components/Header\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport { useState } from \"react\";\r\nimport HorizontalProjectMenu from \"../components/HorizontalProjectSummaries/HorizontalProjectMenu\";\r\nimport MarkPointOnMap from \"../components/MarkPointOnMap\";\r\nimport \"../styles/Styles.css\";\r\nimport \"../styles/MarkPointOnMap.css\";\r\n\r\nexport default function Map() {\r\n  let [selectedProjectIndex, setSelectedProjectIndex] = useState(0);\r\n  return (\r\n    // <div className=\"container-flex\">\r\n    <div>\r\n      <div>\r\n        <Header />\r\n      </div>\r\n      <div>\r\n        <MarkPointOnMap\r\n          setSelectedProjectIndex={setSelectedProjectIndex}\r\n          selectedProjectIndex={selectedProjectIndex}\r\n        />\r\n      </div>\r\n      <div className=\"slider-spacer\">\r\n        <HorizontalProjectMenu\r\n          selectedProjectIndex={selectedProjectIndex}\r\n          setSelectedProjectIndex={setSelectedProjectIndex}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Navbar />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport \"../../styles/Styles.css\";\r\n\r\nconst ProjectHeader = ({\r\n  projectName,\r\n  projectImageBackground,\r\n  projectImageAlt,\r\n}) => {\r\n  const ResizeToFitText = useCallback((element, outerHeight) => {\r\n    const fontSize = window.getComputedStyle(element).fontSize;\r\n    element.style.fontSize = parseInt(fontSize) - 0.1 + \"px\";\r\n    if (element.clientHeight > outerHeight) {\r\n      ResizeToFitText(element, outerHeight);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const outerHeight = document.getElementById(\"outer\").clientHeight;\r\n    const titleDiv = document.getElementById(\"title\");\r\n    if (titleDiv.clientHeight > outerHeight) {\r\n      ResizeToFitText(titleDiv, outerHeight);\r\n    }\r\n  }, [projectName, ResizeToFitText]);\r\n\r\n  return (\r\n    <div className=\"border-bottom\">\r\n      <div className=\"project-header\">\r\n        <div id=\"outer\">\r\n          <div className=\"project-title\" id=\"title\">\r\n            {\" \"}\r\n            {projectName}{\" \"}\r\n          </div>\r\n          <img\r\n            id=\"pict\"\r\n            src={projectImageBackground}\r\n            alt={projectImageAlt}\r\n            style={{ width: \"75%\", padding: \"0vw 0vw 0vw 5vw\", float: \"right\" }}\r\n          />\r\n        </div>\r\n        <br />\r\n        <br />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ProjectHeader;\r\n","import React from \"react\";\r\nimport \"../../styles/Styles.css\";\r\n\r\nfunction hasAValue(value) {\r\n  return value !== undefined && value.length > 0;\r\n}\r\n\r\nconst LeftSideShortcutField = ({ label, value }) => {\r\n  return (\r\n    hasAValue(value) && (\r\n      <div>\r\n        <div>{label}</div>\r\n        {value}\r\n      </div>\r\n    )\r\n  );\r\n};\r\nconst ProjectPageLeftSideShortcuts = ({\r\n  projectAddress,\r\n  projectCity,\r\n  projectProvince,\r\n  projectPostalCode,\r\n}) => {\r\n  return (\r\n    <div className=\"border-right project-padding\">\r\n      <LeftSideShortcutField label=\"ADDRESS\" value={projectAddress} />\r\n      <br />\r\n      <LeftSideShortcutField label=\"CITY\" value={projectCity} />\r\n      <br />\r\n      <LeftSideShortcutField label=\"PROVINCE\" value={projectProvince} />\r\n      <br />\r\n      <LeftSideShortcutField label=\"POSTAL CODE:\" value={projectPostalCode} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectPageLeftSideShortcuts;\r\n","import React from \"react\";\r\nimport \"../../styles/Styles.css\";\r\n\r\nfunction hasAValue(value) {\r\n  return value !== undefined && value.length > 0;\r\n}\r\nconst CheckIfHasValue = ({ label, value }) => {\r\n  return (\r\n    hasAValue(value) && (\r\n      <div>\r\n        <div>{label}</div>\r\n        {value}\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nconst ProjectDescription = ({\r\n  projectName,\r\n  projectTypology,\r\n  projectNeighbourhood,\r\n  projectCity,\r\n  projectProvince,\r\n  projectFirm,\r\n  projectYear,\r\n  projectClient,\r\n}) => {\r\n  return (\r\n    <div className=\"border project-description project-padding\">\r\n      The {projectName} is a {projectTypology} located in the{\" \"}\r\n      {projectNeighbourhood} neighbourhood in {projectCity},{projectProvince}\r\n      <br />\r\n      <br />\r\n      The project was{\" \"}\r\n      <CheckIfHasValue value={projectFirm}>\r\n        {\" \"}\r\n        designed by {projectFirm} and\r\n      </CheckIfHasValue>{\" \"}\r\n      completed in {projectYear}{\" \"}\r\n      <CheckIfHasValue value={projectClient}>for the</CheckIfHasValue>{\" \"}\r\n      {projectClient}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectDescription;\r\n","import React from \"react\";\r\nimport \"../../styles/Styles.css\";\r\n\r\nconst ProjectRelatedClassifications = ({\r\n  projectPrimaryName,\r\n  projectSecondaryName,\r\n  projectTertiaryName,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <div className=\"border-top project-padding-left\">\r\n        <h2>CLASSIFICATIONS</h2>\r\n      </div>\r\n      <div className=\"border-top project-padding-left\">\r\n        <p>{projectPrimaryName}</p>\r\n        <p>{projectSecondaryName}</p>\r\n        <p>{projectTertiaryName}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectRelatedClassifications;\r\n","import React from \"react\";\r\nimport \"../../styles/Styles.css\";\r\n\r\nconst FeatureWordsList = ({ featureWords }) => {\r\n  return (\r\n    // <div className=\"project-margins\">\r\n    //    <p>\r\n    //       <u>Features</u>\r\n    //    </p>\r\n    //    <div>\r\n    <div>\r\n      <div className=\"border-top project-padding-left\">\r\n        <h2>FEATURES</h2>\r\n      </div>\r\n      <div className=\"border-top project-padding-left\">\r\n        {featureWords.map((featureWord) => {\r\n          return (\r\n            <div key={featureWord}>\r\n              <p>{featureWord}</p>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeatureWordsList;\r\n","import { createContext } from \"react\";\r\n\r\nconst GlossaryContext = createContext({\r\n  allTerms: [],\r\n  selectSelectedTerm: () => {},\r\n  selectedDefinition: undefined,\r\n});\r\n\r\nexport default GlossaryContext;\r\n","import { useContext, useEffect, useState } from 'react';\r\nimport GlossaryContext from \"../../store/GlossaryContext\";\r\n\r\nimport './glossary.css'\r\n\r\nconst indexOfTerm = (term, text, startingAt) => {\r\n    return text.indexOf(term, startingAt)\r\n}\r\n\r\nconst splitSpanWithTerm = (term, spanDetail) => {\r\n    let resultSpans = []\r\n    let startIndex = 0\r\n    let upperCaseTerm = term.toUpperCase()\r\n    let upperCaseText = spanDetail.text.toUpperCase()\r\n    let nextMatchIndex = indexOfTerm(upperCaseTerm, upperCaseText)\r\n    while (nextMatchIndex !== -1) {\r\n        resultSpans.push({ text: spanDetail.text.substr(startIndex, nextMatchIndex-startIndex)})\r\n        resultSpans.push({ text: spanDetail.text.substr(nextMatchIndex, term.length), term})\r\n        startIndex = nextMatchIndex+term.length\r\n        nextMatchIndex = indexOfTerm(upperCaseTerm, upperCaseText, nextMatchIndex+1)\r\n    }\r\n    if (startIndex < spanDetail.text.length) {\r\n        resultSpans.push({ text: spanDetail.text.substr(startIndex)})\r\n    }\r\n    return resultSpans\r\n}\r\n\r\nconst TextSpan = ({text, term}) => {\r\n    let glossaryContext = useContext(GlossaryContext)\r\n    return term?\r\n        (<span className='glossary-word' onClick={() => glossaryContext.setSelectedTerm(term)} >{text} </span>)\r\n    :\r\n        (<span>{text}</span>)\r\n\r\n}\r\n\r\nconst TextWithGlossaryLinks = ({text}) => {\r\n  let glossaryContext = useContext(GlossaryContext)\r\n  let [ textSpanDetails, setTextSpanDetails ] = useState([])\r\n\r\n  useEffect(() => {\r\n    // get the terms and sort them by length so the longest terms are matched first\r\n    let terms = [...glossaryContext.allTerms]\r\n    terms.sort((a, b) => b.length - a.length)\r\n\r\n    // initialize span details with a single large span\r\n    let spanDetails = [ { text: text } ]\r\n\r\n    // one by one look for the terms and split the text up\r\n    terms.forEach((term) => {\r\n        let newSpanDetails = []\r\n        spanDetails.forEach((spanDetail) => {\r\n            if (spanDetail.term) {\r\n                newSpanDetails.push(spanDetail)\r\n            }\r\n            else {\r\n                newSpanDetails.push(...splitSpanWithTerm(term, spanDetail))\r\n            }\r\n        })\r\n        spanDetails = newSpanDetails\r\n    })\r\n    setTextSpanDetails(spanDetails)\r\n\r\n  }, [text, glossaryContext])\r\n\r\n  return (\r\n    <>\r\n      { \r\n        textSpanDetails.map((textSpan, index) => <TextSpan key={index} text={textSpan.text} term={textSpan.term}/>)\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TextWithGlossaryLinks\r\n","import React from \"react\";\r\nimport TextWithGlossaryLinks from \"../Glossary/TextWithGlossaryLinks\";\r\nimport \"../../styles/Styles.css\";\r\n\r\nconst ProjectClassifications = ({\r\n  projectDescription,\r\n  projectPrimaryName,\r\n  projectPrimaryDescription,\r\n  projectSecondaryName,\r\n  projectSecondaryDescription,\r\n  projectTertiaryName,\r\n  projectTertiaryDescription,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <div className=\"border-top project-padding-left\">\r\n        <h2>PROJECT DESCRIPTION</h2>\r\n      </div>\r\n      <div className=\"border-top project-padding-left\">\r\n        <p className=\"descriptionFormat\">\r\n          <TextWithGlossaryLinks text={projectDescription} />\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <div className=\"border-top projectclassification project-padding-left\">\r\n          <h2>RELATED CLASSIFICATIONS</h2>\r\n        </div>\r\n        <div className=\"border-top projectclassification project-padding-left\">\r\n          <br />\r\n          <div className=\"classificationName\">{projectPrimaryName}</div>\r\n          <pre className=\"descriptionFormat\">\r\n            <TextWithGlossaryLinks text={projectPrimaryDescription} />\r\n          </pre>\r\n          <br />\r\n          <div className=\"classificationName\">{projectSecondaryName}</div>\r\n          <pre className=\"descriptionFormat\">\r\n            <TextWithGlossaryLinks text={projectSecondaryDescription} />\r\n          </pre>\r\n          <br />\r\n          <div className=\"classificationName\">{projectTertiaryName}</div>\r\n          <pre className=\"descriptionFormat\">\r\n            <TextWithGlossaryLinks text={projectTertiaryDescription} />\r\n          </pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectClassifications;\r\n","import { useState, useEffect, useContext } from 'react'\r\nimport ReactModal from 'react-modal'\r\nimport GlossaryContext from \"../../store/GlossaryContext\"\r\n\r\nimport './glossary.css'\r\n\r\n// I couldn't figure out how to do this with css\r\nconst modalStyles = {\r\n   overlay: {\r\n      backgroundColor: '#00000080',\r\n   },\r\n   content: {\r\n      top: '20px',\r\n      left: '20px',\r\n      bottom: '20px',\r\n      right: '20px',\r\n      backgroundColor: 'black',\r\n      color: 'white'\r\n   }\r\n}\r\n\r\nconst GlossaryIndex = ({ terms, selectedLetter, selectTerm }) => {\r\n   let filtered = terms.filter((term) => term.startsWith(selectedLetter))\r\n   let sorted = [...filtered]\r\n   sorted.sort()\r\n   return (\r\n      <div className='glossary-index'>\r\n         {\r\n            sorted.map((term, index) => (\r\n               <div key={'term' + index} onClick={() => selectTerm(term)}>{term}</div>\r\n            ))\r\n         }\r\n      </div>\r\n   )\r\n}\r\n\r\nconst GlossaryEntry = ({ selectedDefinition }) => {\r\n   return selectedDefinition ? (\r\n      <div className='glossary-entry'>\r\n         <div className='glossary-entry-title'>\r\n            {selectedDefinition.term}\r\n         </div>\r\n         <div className='glossary-entry-text'>\r\n            {selectedDefinition.description}\r\n         </div>\r\n      </div>\r\n   ) : null\r\n}\r\n\r\nconst LetterSelector = ({ letter, selectLetter }) => {\r\n   return (\r\n      <div className=\"glossary-letter\" onClick={() => selectLetter(letter)}>{letter}</div>\r\n   )\r\n}\r\n\r\nconst LetterSelectors = ({ selectLetter }) => {\r\n   return (\r\n      <div className=\"glossary-letters border-right\">\r\n         <LetterSelector letter=\"A\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"B\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"C\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"D\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"E\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"F\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"G\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"H\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"I\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"J\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"K\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"L\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"M\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"N\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"O\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"P\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"Q\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"R\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"S\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"T\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"U\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"V\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"W\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"X\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"Y\" selectLetter={selectLetter} />\r\n         <LetterSelector letter=\"Z\" selectLetter={selectLetter} />\r\n      </div>\r\n   )\r\n}\r\n\r\nconst GlossaryContainer = () => {\r\n   let glossaryContext = useContext(GlossaryContext)\r\n   let [showGlossary, setShowGlossary] = useState(false)\r\n   let [selectedLetter, setSelectedLetter] = useState()\r\n\r\n   useEffect(() => {\r\n      if (glossaryContext.selectedDefinition) {\r\n         setSelectedLetter(glossaryContext.selectedDefinition.term.charAt(0))\r\n         setShowGlossary(true)\r\n      }\r\n   }, [glossaryContext])\r\n\r\n   const hideGlossary = () => {\r\n      glossaryContext.setSelectedTerm(null)\r\n      setShowGlossary(false)\r\n   }\r\n\r\n   const selectTerm = (term) => {\r\n      glossaryContext.setSelectedTerm(term)\r\n   }\r\n\r\n   const selectLetter = (letter) => {\r\n      setSelectedLetter(letter)\r\n      glossaryContext.setSelectedTerm(null)\r\n   }\r\n\r\n   return (\r\n      <ReactModal isOpen={showGlossary} style={modalStyles}>\r\n         <div className='glossary-fullscreen'>\r\n            <div className='glossary-header border-bottom'>\r\n               <div className='glossary-button-container'>\r\n                  <div className='glossary-cancel' onClick={() => hideGlossary()}>Cancel</div>\r\n               </div>\r\n               <h1>Glossary</h1>\r\n            </div>\r\n            <div className='glossary-body'>\r\n               <LetterSelectors selectLetter={selectLetter} />\r\n               <div className='glossary-entry-def'>\r\n                  {\r\n                     (glossaryContext.selectedDefinition) ?\r\n                        (<GlossaryEntry selectedDefinition={glossaryContext.selectedDefinition} />)\r\n                        :\r\n                        (<GlossaryIndex terms={glossaryContext.allTerms} selectedLetter={selectedLetter} selectTerm={selectTerm} />)\r\n                  }\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </ReactModal>\r\n   )\r\n}\r\n\r\nexport default GlossaryContainer","import { useState, useEffect, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ProjectHeader from \"../components/ProjectPage/ProjectHeader\";\r\nimport ProjectPageLeftSideShortcuts from \"../components/ProjectPage/ProjectPageLeftSideShortcuts\";\r\nimport ProjectDescription from \"../components/ProjectPage/ProjectDescription\";\r\nimport ProjectRelatedClassifications from \"../components/ProjectPage/ProjectRelatedClassifications\";\r\nimport FeatureWordsList from \"../components/ProjectPage/ProjectFeatureWords\";\r\nimport ProjectClassifications from \"../components/ProjectPage/ProjectClassifications\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport GlossaryContainer from \"../components/Glossary/GlossaryContainer\";\r\nimport ProjectSlider from \"../components/HorizontalProjectSummaries/ProjectSlider\";\r\nimport ClassificationContext from \"../store/ClassificationContext\";\r\nimport \"../styles/Styles.css\";\r\n\r\nconst ProjectPage = () => {\r\n  const params = useParams();\r\n  const chosenID = params.id;\r\n  const [project, setProject] = useState();\r\n  const classificationCtx = useContext(ClassificationContext);\r\n  let [selectedProjectIndex, setSelectedProjectIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const getProject = async () => {\r\n      const requestOptions = {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      try {\r\n        let response = await fetch(\"/api/project/\" + chosenID, requestOptions);\r\n        if (response.status !== 200) {\r\n          throw new Error(\"Fetch for project ID failed\");\r\n        }\r\n        let data = await response.json();\r\n\r\n        setProject(data);\r\n      } catch (err) {\r\n        console.log(\"Error on client-side.\", err);\r\n      }\r\n    };\r\n    getProject();\r\n  }, [chosenID]);\r\n\r\n  if (project !== undefined) {\r\n    return (\r\n      <div className=\"container-grid\">\r\n        <div>\r\n          <div>\r\n            <ProjectHeader\r\n              projectName={project.projectName}\r\n              projectImageBackground={project.imageUrls.image1.image}\r\n              projectImageAlt={project.imageUrls.image1.alt}\r\n            />\r\n          </div>\r\n          <div className=\"container-grid-two-in-the-row\">\r\n            {(project.location.address ||\r\n              project.location.city ||\r\n              project.location.province ||\r\n              project.location.postalCode) && (\r\n              <ProjectPageLeftSideShortcuts\r\n                projectAddress={project.location.address}\r\n                projectCity={project.location.city}\r\n                projectProvince={project.location.province}\r\n                projectPostalCode={project.location.postalCode}\r\n              />\r\n            )}\r\n            <ProjectDescription\r\n              projectName={project.projectName}\r\n              projectTypology={project.projectTypology}\r\n              projectNeighbourhood={project.Neighbourhood}\r\n              projectCity={project.location.city}\r\n              projectProvince={project.location.province}\r\n              projectFirm={project.companyName}\r\n              projectYear={project.dateOfCompletion}\r\n              projectClient={project.projectOwnersAndClients}\r\n            />\r\n          </div>\r\n          <ProjectRelatedClassifications\r\n            projectPrimaryName={\r\n              project.innovationDescriptions.primaryTypeOfInnovation\r\n                .classificationName\r\n            }\r\n            projectSecondaryName={\r\n              project.innovationDescriptions.secondaryTypeOfInnovation\r\n                .classificationName\r\n            }\r\n            projectTertiaryName={\r\n              project.innovationDescriptions.tertiaryTypeOfInnovation\r\n                .classificationName\r\n            }\r\n          />\r\n          <FeatureWordsList\r\n            featureWords={project.innovationDescriptions.featureWords}\r\n          />\r\n          <ProjectClassifications\r\n            projectDescription={project.projectDescription}\r\n            projectPrimaryName={\r\n              project.innovationDescriptions.primaryTypeOfInnovation\r\n                .classificationName\r\n            }\r\n            projectPrimaryDescription={\r\n              project.innovationDescriptions.primaryTypeOfInnovation\r\n                .projectDescription\r\n            }\r\n            projectSecondaryName={\r\n              project.innovationDescriptions.secondaryTypeOfInnovation\r\n                .classificationName\r\n            }\r\n            projectSecondaryDescription={\r\n              project.innovationDescriptions.secondaryTypeOfInnovation\r\n                .projectDescription\r\n            }\r\n            projectTertiaryName={\r\n              project.innovationDescriptions.tertiaryTypeOfInnovation\r\n                .classificationName\r\n            }\r\n            projectTertiaryDescription={\r\n              project.innovationDescriptions.tertiaryTypeOfInnovation\r\n                .projectDescription\r\n            }\r\n          />\r\n        </div>\r\n        <div className=\"border-top project-padding-left\">\r\n          <h2>RELATED PROJECTS</h2>\r\n        </div>\r\n        <div className=\"border-top\">\r\n          <br></br>\r\n          <ProjectSlider\r\n            className=\"slider-on-project-page border-top border-bottom\"\r\n            slides={classificationCtx.projects}\r\n            selectedProjectIndex={selectedProjectIndex}\r\n            setSelectedProjectIndex={setSelectedProjectIndex}\r\n          />\r\n        </div>\r\n        <div className=\"navbar-project-page\">\r\n          <Navbar />\r\n        </div>\r\n        <GlossaryContainer />\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default ProjectPage;\r\n","import ClassificationContext from \"./ClassificationContext\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport default function ClassificationProvider({ children }) {\r\n  const [allClassifications, setAllClassifications] = useState([]);\r\n  const [allGatewayWords, setAllGatewayWords] = useState([]);\r\n  const [gatewayWord, setGatewayWord] = useState();\r\n  const [classification, setClassification] = useState();\r\n  const [projects, setProjects] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getAllClassifications = async () => {\r\n      try {\r\n        let response = await fetch(\"/api/classification\");\r\n        if (response.status !== 200) {\r\n          throw new Error(\"Fetch for classifications failed\");\r\n        }\r\n        let classifications = await response.json();\r\n        setAllClassifications(classifications);\r\n      } catch (err) {\r\n        console.log(\"Error on Client-Side: Classifications\", err);\r\n      }\r\n    };\r\n\r\n    getAllClassifications();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let foundGatewayWords = [];\r\n    allClassifications.forEach((classification) => {\r\n      let newGatewayWords = classification.gatewayWords;\r\n      foundGatewayWords = foundGatewayWords.concat(newGatewayWords);\r\n    });\r\n    setAllGatewayWords(foundGatewayWords);\r\n  }, [allClassifications]);\r\n\r\n  useEffect(() => {\r\n    if (gatewayWord) {\r\n      let foundClassification = allClassifications.find((classification) => {\r\n        return classification.gatewayWords.includes(gatewayWord);\r\n      });\r\n      setClassification(foundClassification);\r\n    }\r\n  }, [gatewayWord, allClassifications]);\r\n\r\n  useEffect(() => {\r\n    const getProjects = async () => {\r\n      const requestOptions = {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      if (classification) {\r\n        try {\r\n          let response = await fetch(\r\n            \"/api/project/findProjectsByClassification?classificationId=\" +\r\n              classification._id,\r\n            requestOptions\r\n          );\r\n          if (response.status !== 200) {\r\n            throw new Error(\"Fetch for project summaries failed\");\r\n          }\r\n          let projects = await response.json();\r\n          setProjects(projects);\r\n        } catch (err) {\r\n          console.log(\"Error on client-side.\", err);\r\n        }\r\n      }\r\n    };\r\n    getProjects();\r\n  }, [gatewayWord, classification]);\r\n\r\n  return (\r\n    <ClassificationContext.Provider\r\n      value={{\r\n        allGatewayWords,\r\n        gatewayWord,\r\n        setGatewayWord,\r\n        classification,\r\n        projects,\r\n      }}\r\n    >\r\n      {children}\r\n    </ClassificationContext.Provider>\r\n  );\r\n}\r\n","import GlossaryContext from \"./GlossaryContext\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction removeNBSP(text) {\r\n  return text.replace(/\\u00A0/g, \"\\x20\");\r\n}\r\n\r\nfunction fixDefinition(definition) {\r\n  return {\r\n    term: removeNBSP(definition.term),\r\n    description: removeNBSP(definition.description),\r\n  };\r\n}\r\n\r\nexport default function GlossaryProvider({ children }) {\r\n  const [allDefintions, setAllDefinitions] = useState([]);\r\n  const [allTerms, setAllTerms] = useState([]);\r\n  const [selectedDefinition, setSelectedDefinition] = useState();\r\n\r\n  useEffect(() => {\r\n    const getAllDefinitions = async () => {\r\n      try {\r\n        let response = await fetch(\"/api/glossary\");\r\n        if (response.status !== 200) {\r\n          throw new Error(\"Fetch for glossary words failed\");\r\n        }\r\n        let definitions = await response.json();\r\n        setAllDefinitions(definitions.map(fixDefinition));\r\n      } catch (err) {\r\n        console.log(\"Error on Client-Side: Glossary Defintions\", err);\r\n      }\r\n    };\r\n\r\n    getAllDefinitions();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let terms = allDefintions.map((definition) => definition.term);\r\n    setAllTerms(terms);\r\n  }, [allDefintions]);\r\n\r\n  const setSelectedTerm = (term) => {\r\n    let foundDefintion = allDefintions.find(\r\n      (definition) => definition.term === term\r\n    );\r\n    setSelectedDefinition(foundDefintion);\r\n  };\r\n\r\n  return (\r\n    <GlossaryContext.Provider\r\n      value={{\r\n        allTerms,\r\n        setSelectedTerm,\r\n        selectedDefinition,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlossaryContext.Provider>\r\n  );\r\n}\r\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Gateway } from \"./pages/Gateway\";\r\nimport Category from \"./pages/Category\";\r\nimport Map from \"./pages/Map\";\r\nimport ProjectPage from \"./pages/ProjectPage\";\r\nimport ClassificationProvider from \"./store/ClassificationProvider\";\r\nimport GlossaryProvider from \"./store/GlossaryProvider\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ClassificationProvider>\r\n      <GlossaryProvider>\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/\" exact component={Gateway} />\r\n            <Route path=\"/Category\" component={Category} />\r\n            <Route path=\"/Map\" component={Map} />\r\n            <Route path=\"/ProjectPage/:id\" component={ProjectPage} />\r\n          </Switch>\r\n        </Router>\r\n      </GlossaryProvider>\r\n    </ClassificationProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport 'mapbox-gl/dist/mapbox-gl.css'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <App />\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}